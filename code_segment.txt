@bot.command(name='support')
async def support(ctx):
    help_message = (
        "**List of available commands:**\n\n"
        "**!hello**: Sends a simple greeting message.\n"
        "**!credits**: Displays your current credits.\n"
        "**!seeall**: Lists all roles you have and their associated credits.\n"
        "**!whoami**: Sends your information, including join date and credits, via direct message.\n"
        "**!report <problem>**: Sends a report message to the designated 'bug' channel.\n"
        "**!version**: Displays the current version of the bot.\n"
        "**!support**: Lists all available commands and their descriptions.\n"
        "**!ggn_store**: Displays Geetsly's Gaming Network Store Conversions.\n"
        "**!store 1**: Displays store items for 7,500 credits.\n"
        "**!store 2**: Displays store items for 10,000 credits.\n"
        "**!store 3**: Displays store items for 15,000-20,000 credits.\n"
        "**!store 4**: Displays store items for 30,000-35,000 credits.\n"
        "**!store 5**: Displays store items for 40,000-45,000 credits.\n"
        "**!store 0**: Sends all store items as a direct message.\n\n"
        "**Developer Commands:**\n"
        "**!addrole <role_name> <credit_amount>**: Adds a role with a specific credit amount.\n"
        "**!removerole <role_name>**: Removes a role and its associated credits.\n"
        "**!exportdb**: Exports the database to an Excel file.\n"
        "**!botTest**: Runs a series of tests on all commands to check for errors."
    )
    await ctx.send(f'```\n{help_message}\n```')


@bot.command()
@is_bot_dev()
async def exportdb(ctx):
    try:
        connection = sqlite3.connect('credits.db')

        # Debugging: Überprüfen der Datenrahmen
        df_users = pd.read_sql_query("SELECT * FROM user_credits", connection)
        df_roles = pd.read_sql_query("SELECT * FROM role_credits", connection)
        df_non_stacking_roles = pd.read_sql_query("SELECT * FROM non_stacking_role_credits", connection)
        print("User Credits DataFrame:\n", df_users)
        print("Role Credits DataFrame:\n", df_roles)
        print("Non-Stacking Role Credits DataFrame:\n", df_non_stacking_roles)

        # Merge the user credits with roles for visualization
        user_roles = []
        for guild in bot.guilds:
            for member in guild.members:
                roles = [role.name for role in member.roles]
                user_roles.append({"user_id": member.id, "username": member.name, "roles": ", ".join(roles)})

        df_user_roles = pd.DataFrame(user_roles)
        print("User Roles DataFrame:\n", df_user_roles)

        # Merge dataframes to create a complete view
        df_complete = pd.merge(df_user_roles[['user_id', 'username']], df_users, on="user_id", how="left")
        print("Complete DataFrame:\n", df_complete)

        # Replace NaN values with zeroes
        df_complete = df_complete.fillna(0)
        print("Complete DataFrame after replacing NaN values:\n", df_complete)

        # Authorize the client and create/open the spreadsheet
        spreadsheet_name = '41st-database'  # Aktualisierter Name der Tabelle
        worksheet_user_credits = 'UserCredits'
        worksheet_role_credits = 'RoleCredits'
        worksheet_non_stacking_role_credits = 'NonStackingRoleCredits'
        worksheet_trooper_info = 'trooper-info'

        sh = client.open(spreadsheet_name)
        print("Google Sheets connection established.")

        # Get or create worksheets
        try:
            worksheet_user_credits_obj = sh.worksheet(worksheet_user_credits)
        except gspread.exceptions.WorksheetNotFound:
            worksheet_user_credits_obj = sh.add_worksheet(title=worksheet_user_credits, rows="100", cols="20")
            print("UserCredits worksheet created.")

        try:
            worksheet_role_credits_obj = sh.worksheet(worksheet_role_credits)
        except gspread.exceptions.WorksheetNotFound:
            worksheet_role_credits_obj = sh.add_worksheet(title=worksheet_role_credits, rows="100", cols="20")
            print("RoleCredits worksheet created.")

        try:
            worksheet_non_stacking_role_credits_obj = sh.worksheet(worksheet_non_stacking_role_credits)
        except gspread.exceptions.WorksheetNotFound:
            worksheet_non_stacking_role_credits_obj = sh.add_worksheet(title=worksheet_non_stacking_role_credits, rows="100", cols="20")
            print("NonStackingRoleCredits worksheet created.")

        try:
            worksheet_trooper_info_obj = sh.worksheet(worksheet_trooper_info)
        except gspread.exceptions.WorksheetNotFound:
            worksheet_trooper_info_obj = sh.add_worksheet(title=worksheet_trooper_info, rows="100", cols="20")
            print("Trooper Info worksheet created.")

        # Clear existing content in the sheets
        try:
            worksheet_user_credits_obj.clear()
            print("UserCredits worksheet cleared.")
        except Exception as e:
            print(f"Failed to clear UserCredits worksheet: {e}")

        try:
            worksheet_role_credits_obj.clear()
            print("RoleCredits worksheet cleared.")
        except Exception as e:
            print(f"Failed to clear RoleCredits worksheet: {e}")

        try:
            worksheet_non_stacking_role_credits_obj.clear()
            print("NonStackingRoleCredits worksheet cleared.")
        except Exception as e:
            print(f"Failed to clear NonStackingRoleCredits worksheet: {e}")

        try:
            worksheet_trooper_info_obj.clear()
            print("Trooper Info worksheet cleared.")
        except Exception as e:
            print(f"Failed to clear Trooper Info worksheet: {e}")

        # Update UserCredits sheet
        try:
            worksheet_user_credits_obj.update([df_complete.columns.values.tolist()] + df_complete.values.tolist())
            print("UserCredits sheet updated.")
        except Exception as e:
            print(f"Failed to update UserCredits sheet: {e}")

        # Update RoleCredits sheet
        try:
            worksheet_role_credits_obj.update([df_roles.columns.values.tolist()] + df_roles.values.tolist())
            print("RoleCredits sheet updated.")
        except Exception as e:
            print(f"Failed to update RoleCredits sheet: {e}")

        # Update NonStackingRoleCredits sheet
        try:
            worksheet_non_stacking_role_credits_obj.update([df_non_stacking_roles.columns.values.tolist()] + df_non_stacking_roles.values.tolist())
            print("NonStackingRoleCredits sheet updated.")
        except Exception as e:
            print(f"Failed to update NonStackingRoleCredits sheet: {e}")

        # Update Trooper Info sheet
        try:
            worksheet_trooper_info_obj.update([df_user_roles.columns.values.tolist()] + df_user_roles.values.tolist())
            print("Trooper Info sheet updated.")
        except Exception as e:
            print(f"Failed to update Trooper Info sheet: {e}")

        await ctx.send(f"```\nDatabase has been exported to the Google Sheet: {spreadsheet_name}\n```")

    except gspread.exceptions.APIError as e:
        await ctx.send(f"```\nAn API error occurred while exporting the database: {e}\n```")
    except Exception as e:
        await ctx.send(f"```\nAn unexpected error occurred while exporting the database: {e}\n```")


@bot.command()
@is_allowed_channel()
async def ggn_store(ctx):
    store_info = (
        "**Geetsly's Gaming Network Store Conversions:**\n"
        "(Please note that these are not prices for credit values. These are credit value conversions, "
        "meaning that a store item which is 15,000 credits is purchasable with $10.00 USD.)\n\n"
        "credits: 7,500 - $5.00 USD\n"
        "credits: 10,000 - $7.50 USD\n"
        "credits: 12,500 - $10.00 USD\n"
        "credits: 15,000 - $10.00 USD\n"
        "credits: 20,000 - $15.00 USD\n"
        "credits: 25,000 - $20.00 USD\n"
        "credits: 30,000 - $25.00 USD\n"
        "credits: 40,000 - $30.00 USD\n"
        "credits: 45,000 - $30.00 USD\n\n"
        "**EXCEPTIONS/SPECIFICS:**\n"
        "'Phase-1 In Game' - $10.00 USD\n"
        "'Custom Visor' - $15.00 USD\n"
        "'2003 Helmet' - $20.00 USD"
    )
    additional_info = (
       "Please remember to DM 'Forceps' CC-3432 for any GGN-Store purchases."
    )
    await ctx.send(f'```\n{store_info}\n```')
    await ctx.send(additional_info)


@bot.command()
@is_allowed_channel()
async def store(ctx, category: int):
    store_categories = {
        1: (
            "credits: 7,500 - $5.00 USD\n"
            "7,500 - 'Helmet Attachments'\n"
            "Choose from one of our pre-existing helmet attachment options.These options currently include: Flashlights, Antennas, Communicators, and the Heavy Sunvisor.\n"
            "7,500 - 'Rangefinder Down'\n"
            "A Rangefinder lowered over the eyes.(For SGT+ only.)\n"
            "7,500 - 'Helmet Tubes/Pipes'\n"
            "A tube for the base class pilot helmets.(Naval helmets only.)"
        ),
        2: (
            "credits: 10,000 - $7.50 USD\n"
            "10,000 - 'Build-Your-Own Attachment'\n"
            "A custom attachment brainstormed by you, built by the Art Team Leads. NOTE: Your attachment can not resemble other attachments, such as a rangefinder.\n"
            "10,000 - 'Specialist Binoculars'\n"
            "Allows for binoculars to be added to your helmet. NOTE: Not all helmets are compatible.\n"
            "10,000 - 'Specialist Binoculars Up'\n"
            "Allows for raised binoculars. NOTE: You must already have access to the binoculars."
        ),
        3: (
            "15,000 - - -\n"
            "15,000 - 'Flight Computer/Targeting Visor'\n"
            "An external holographic visor. (The Flight Computer is only available to ACE pilots of SGT+. The Targeting visor is only available to Spec Ops helmets (Strike Cadre Helmet).)\n"
            "20,000 - - -\n"
            "20,000 - 'Clone Gunner Helmet'\n"
            "A new helmet template. Google 'Clone Heavy Gunner' for reference.\n"
            "20,000 - 'Hooded Helmet'\n"
            "Stylish and Sneaky. (Only for Shadow Cadre and SOF.)"
        ),
        4: (
            "30,000 - - -\n"
            "30,000 - 'Phase 1 ARF Helmet'\n"
            "The ARF Helmet from 'Star Wars The Clone Wars'.\n"
            "30,000 - 'Snowtrooper/Flametrooper Helmet'\n"
            "BRING IN THE FLAMETHROWERS!\n"
            "30,000 - 'Custom Visor'\n"
            "Clearance to a one color visor. NOTE: Troopers may get a refund apon reaching the rank of 2LT or higher, or RC.\n"
            "35,000 - - -\n"
            "35,000 - 'BARC Helmet and Skin'\n"
            "'For the mysterious types.' Recive access to the 41st BARC Helmet as well as permition to use the 91st Recon Corps in game.\n"
            "35,000 - 'Phase 1 Helmet and Skin'\n"
            "A Phase 1 helmet, along with clearence to wear the corresponding skin in game."
        ),
        5: (
            "40,000 - - -\n"
            "40,000 - '2003 Helmet Variants'\n"
            "The classic style. Available for all helmet templates.\n"
            "45,000 - - -\n"
            "45,000 - 'Desert Trooper Helmet (And Skin for PC Only.)'\n"
            "'I hate sand.' Recive the 41st Desert Trooper helmet as well as acces to the 501st Legion in game, if you are on PC. NOTE: Google Clone Desert Trooper for a reference."
        )
    }

    async def send_dm(content):
        max_length = 2000
        for i in range(0, len(content), max_length):
            await ctx.author.send(content[i:i+max_length])

    if category == 0:
        all_store_info = "\n\n".join(store_categories.values())
        await send_dm(f'```\n{all_store_info}\n```')
        await ctx.send("I have sent you a DM with all the store categories.")
    elif category in store_categories:
        await ctx.send(f'```\n{store_categories[category]}\n```')
    else:
        await ctx.send("Invalid category. Please use a number between 0 and 5.")


@bot.command()
@is_bot_dev()
async def botTest(ctx):
    test_results = []

    async def run_command(command, *args):
        try:
            await command(ctx, *args)
            test_results.append(f"✅ {command.name} passed.")
        except Exception as e:
            test_results.append(f"❌ {command.name} failed: {e}")

    # Run all commands
    await run_command(hello)
    await run_command(credits)
    await run_command(seeall)
    await run_command(whoami)
    await run_command(report, "Test report")
    await run_command(version)
    await run_command(addrole, "TEST", 10)
    await run_command(removerole, "TEST")
    await run_command(exportdb)
    await run_command(ggn_store)
    await run_command(store, 1)
    await run_command(store, 2)
    await run_command(store, 3)
    await run_command(store, 4)
    await run_command(store, 5)
    await run_command(store, 0)

    # Send results
    await ctx.send(f'```\n{"\n".join(test_results)}\n```')


@bot.command()
@is_bot_dev()
async def printOutCode(ctx):
    try:
        with open(__file__, 'r', encoding='utf-8') as file:
            code_lines = file.readlines()

        # Extract only the changes and additions
        start_line = None
        end_line = None
        for i, line in enumerate(code_lines):
            if '@bot.command(name=\'support\')' in line:
                start_line = i
            if 'bot.run(' in line:
                end_line = i

        if start_line is not None and end_line is not None:
            code_segment = code_lines[start_line:end_line]
            file_path = 'code_segment.txt'

            # Write code segment to a text file
            with open(file_path, 'w', encoding='utf-8') as output_file:
                output_file.writelines(code_segment)

            # Upload the file to Google Drive
            file_metadata = {'name': 'code_segment.txt'}
            media = MediaFileUpload(file_path, mimetype='text/plain')
            file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
            file_id = file.get('id')

            # Share the file with anyone with the link
            drive_service.permissions().create(
                fileId=file_id,
                body={'type': 'anyone', 'role': 'reader'}
            ).execute()

            file_link = f"https://drive.google.com/file/d/{file_id}/view?usp=sharing"
            await ctx.author.send(f"Here is the link to the uploaded code segment: {file_link}")
        else:
            await ctx.send("```\nUnable to find the specified code segment.\n```")
    except Exception as e:
        await ctx.send(f"```\nAn unexpected error occurred while uploading the code: {e}\n```")


